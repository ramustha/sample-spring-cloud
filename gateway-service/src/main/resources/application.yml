server:
  port: 9000

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
  level:
    org.springframework.web.servlet.DispatcherServlet: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: "*"

spring:
  application:
    name: gateway-service
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: gateway-service
            client-secret: keycloak-secret
            scope: openid
        provider:
          keycloak:
            issuer-uri: ${KEYCLOAK_URL:http://localhost:8080}/auth/realms/PolarBookshop
  session:
    store-type: redis
  cloud:
    gateway:
      default-filters:
        - SaveSession
        - TokenRelay
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
      routes:
        - id: product-route
          uri: ${PRODUCT_SERVICE_URL:http://product-service:8002}
          predicates:
            - Path=/products/**
          filters:
            - AddResponseHeader=X-Gateway, cloud-gateway
            - name: CircuitBreaker
              args:
                name: productService
                fallbackUri: forward:/fallback
            - name: Retry
              args:
                retries: 3
                method: GET
                backoff:
                  firstBackoff: 50ms

resilience4j:
  circuitbreaker:
    instances:
      productService:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        registerHealthIndicator: true
  timelimiter:
    instances:
      productService:
        timeoutDuration: 3s
